name: Java CI with Maven

on:
  push:
    branches: [ production ]
  pull_request:
    branches: [ production ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Build with Maven
      run: |
        PATH="/opt/apache-maven-3.6.3/bin:$PATH"
        mvn clean install

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      with:
        projectBaseDir: .
        args: >
          -Dsonar.verbose=true
          -Dsonar.projectKey=devops-test1234_woapp
          -Dsonar.organization=devops-test1234
          -Dsonar.projectName=health-care
          -Dsonar.language=java
          -Dsonar.sourceEncoding=UTF-8
          -Dsonar.sources=.
          -Dsonar.java.binaries=target/classes
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL

    # Optionally you can use the output from the Quality Gate in another step.
    # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
    - name: "Example show SonarQube Quality Gate Status value"
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
    - name: login to ecr
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/m7w0r2s7
    - name: build docker image
      run: |
        docker build -t public.ecr.aws/m7w0r2s7/my-public:1.0 .
        docker push public.ecr.aws/m7w0r2s7/my-public:1.0
    - name: deploy to eks
      run: |
        kubectl apply -f deploy.yaml
        kubectl apply -f svc.yaml
        
      
